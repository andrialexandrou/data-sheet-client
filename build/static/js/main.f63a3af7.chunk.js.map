{"version":3,"sources":["components/geoSuggest.js","components/laborStatistics.js","components/unemployment.js","App.js","serviceWorker.js","index.js"],"names":["Autosuggest","require","GeoSuggest","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getFromServer","inputValue","dataSet","dataset","path","concat","window","location","hostname","Promise","resolve","reject","axios","get","then","response","data","catch","err","onClear","setState","suggestions","onFetch","_","debounce","_ref","value","flatSuggestions","map","obj","area","renderSuggestion","suggestion","react_default","a","createElement","renderSelections","selections","count","sel","key","onKeyDown","event","isEnter","which","isBackspace","selection","state","add","text","id","remove","onChange","_ref2","newValue","type","isDown","isUp","indexOfCurrentSelection","indexOf","valueToBe","isFirstIndex","previousValue","isLastIndex","length","nextValue","inputProps","onBlur","placeholder","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","Component","Toolbar","Selectors","Data","Grid","_this2","requestFromAPI","isForDownload","queryString","filters","query","forEach","filter","filterLabel","filterValue","join","thisQuery","buildQueryString","getSize","getRows","rowGetter","rowIdx","onClearFilters","download","isWaitingForDownload","pleaseHold","alert","handleClick","e","target","offsetParent","className","closeFilters","document","removeEventListener","showFilters","openFilters","addEventListener","findKey","isMeasureType","measureTypes","find","isSeasonalityType","seasonalityEnums","isAreaType","areaTypes","handleChange","checked","name","uniq","index","handleTagDelete","i","tags","_this$state","tag","handleTagAdd","category","_this$state2","DownloadButton","isEmpty","disabled","onClick","makeCheckboxes","names","rows","supplemental","note","push","FilterForm","delimiters","keys","filterName","isLastItem","size","string","style","color","ReactTags","handleDelete","handleAddition","geoSuggest","period","label","_columns","width","_this3","headers","blob","Blob","link","display","href","URL","createObjectURL","now","Date","getYear","getMonth","getDate","createFilename","click","_rows","lastItem","hasMoreResults","console","log","position","left","react_data_grid_default","columns","rowsCount","minHeight","minColumnWidth","toolbar","handleFilterChange","newFilters","assign","filterTerm","column","unemployment_Toolbar","enableFilter","onAddFilter","App","grid","bind","assertThisInitialized","showGrid","prompt","laborStatistics","unemployment","Boolean","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f63a3af7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nconst Autosuggest = require('react-autosuggest');\n\nclass GeoSuggest extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      value: \"\",\n      suggestions: [],\n      selections: []\n    }\n  }\n\n  getFromServer = inputValue => {\n    const dataSet = this.props.dataset;\n    const path = `http://${ window.location.hostname }:4000/${ dataSet }/suggest?geo=${ inputValue }`;\n\n    return new Promise( (resolve, reject) => {\n      axios.get( path )\n        .then( response => {\n          resolve(response.data);\n        } )\n        .catch( err => {\n          reject(err);\n        } );\n\n    });\n  }\n\n  onClear = () => {\n    this.setState({\n      suggestions: []\n    })\n  }\n\n  onFetch = _.debounce( ({ value }) => {\n    this.getFromServer( value )\n      .then( suggestions => {\n        const flatSuggestions = suggestions.map(obj => obj.area);\n        this.setState({\n          suggestions: flatSuggestions\n        })\n      });\n  }, 500 );\n\n  renderSuggestion = ( suggestion ) => {\n    return <div>{ suggestion }</div>\n  }\n\n  renderSelections = ( selections ) => {\n    var count = 0;\n    return (\n      <div>\n      {\n        selections.map( sel => {\n          count++;\n          return <div key={count}>{ sel }</div>;\n        })\n      }\n      </div>\n    );\n  }\n\n  onKeyDown = (event) => {\n    const isEnter = event.which === 13;\n    const isBackspace = event.which === 8;\n\n    if ( isEnter ) {\n      const selection = this.state.value;\n      this.props.add({text: selection, id: selection}, 'area');\n      this.setState({value: ''});\n    }\n    if ( isBackspace ) {\n      this.props.remove('last', 'area');\n    }\n  }\n\n  onChange = (event, { newValue }) => {\n    if (event.type === 'change' ) {\n      this.setState({\n        value: newValue\n      });\n    }\n    if ( event.type === 'keydown' ) {\n      const isDown = event.which === 40;\n      const isUp = event.which === 38;\n\n      const indexOfCurrentSelection = this.state.suggestions.indexOf( this.state.value );\n\n      let valueToBe = this.state.value;\n      if ( isUp ) {\n        const isFirstIndex = indexOfCurrentSelection === 0;\n        const previousValue = this.state.suggestions[ indexOfCurrentSelection - 1 ];\n        valueToBe = isFirstIndex ? this.state.value : previousValue;\n      }\n      if ( isDown ) {\n        const isLastIndex = indexOfCurrentSelection + 1 === this.state.suggestions.length;\n        const nextValue = this.state.suggestions[ indexOfCurrentSelection + 1 ];\n        valueToBe = isLastIndex ? this.state.value : nextValue;\n      }\n\n      this.setState({\n        value: valueToBe\n      })\n    }\n  }\n\n  render() {\n    const suggestions = this.state.suggestions;\n\n    const inputProps = {\n      value: this.state.value,\n      onChange: this.onChange,\n      onKeyDown: this.onKeyDown,\n      onBlur: () => {},\n      type: 'search',\n      placeholder: 'location'\n    };\n\n    return (\n      <div>\n        { this.renderSelections( this.state.selections ) }\n        <Autosuggest\n          suggestions={ suggestions }\n          onSuggestionsFetchRequested={ this.onFetch }\n          onSuggestionsClearRequested={ this.onClear }\n          getSuggestionValue={ this.getFromServer }\n          renderSuggestion={ this.renderSuggestion }\n          inputProps={ inputProps } />\n      </div>\n    );\n  }\n}\n\nexport default GeoSuggest;\n","import React, { Component } from 'react';\nimport ReactDataGrid from 'react-data-grid';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport GeoSuggest from './geoSuggest';\n\nconst {\n  Toolbar,\n  Data: { Selectors }\n} = require('react-data-grid-addons');\n\nfunction buildQueryString( filters ) {\n  let query = '?';\n  _.forEach(filters, (filter, key) => {\n    var filterLabel = key;\n    var filterValue = filter.join('|');\n    const thisQuery = `${ filterLabel }=${ filterValue }&`;\n    query += thisQuery;\n  });\n  return query;\n}\n\nfunction createFilename() {\n  const now = new Date();\n  const filename = `LAUS_${ 1900 + now.getYear() }-${ now.getMonth() }-${ now.getDate() }.csv`;\n  return filename;\n}\n\nclass Grid extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this._columns = [\n      {\n        key: 'survey_name',\n        name: 'Survey Name',\n        width: 160\n      },\n      {\n        key: 'series_title',\n        name: 'Series Title',\n        width: 160\n      },\n      {\n        key: 'series_id',\n        name: 'Series ID',\n        width: 200\n      },\n      {\n        key: 'period',\n        name: 'Period',\n        width: 150\n      },\n      {\n        key: 'label',\n        name: 'Label',\n        width: 150\n      },\n      {\n        key: 'seasonality_enum',\n        name: 'Seasonality',\n        width: 100\n      },\n      {\n        key: 'area',\n        name: 'Area',\n        width: 350\n      },\n      {\n        key: 'area_type',\n        name: 'Area Type',\n        width: 160\n      },\n      {\n        key: 'measure_type',\n        name: 'Measure Type',\n        width: 160\n      },\n      {\n        key: 'value',\n        name: 'Value',\n        width: 200\n      }\n    ];\n\n    this.seasonalityEnums = [ {\n      key: 'S',\n      note: '(seasonally adjusted)'\n    }, {\n      key: 'U',\n      note: '(not adjusted)'\n    }];\n    this.areaTypes = [\n      'National',\n      'Statewide',\n      'Metropolitan areas',\n      'Metropolitan divisions',\n      'Micropolitan areas',\n      'Combined areas',\n      'Counties and equivalents',\n      'Cities and towns above 25,000 population',\n      'Cities and towns below 25,000 population in New England',\n      'Parts of cities that cross county boundaries',\n      'Multi-entity small labor market areas',\n      'Intrastate parts of interstate areas',\n      'Balance of state areas',\n      'Census regions',\n      'Census divisions'\n    ];\n    this.measureTypes = [\n      'Unemployment Rate',\n      'Unemployment',\n      'Employment',\n      'Labor Force'\n    ];\n\n    this.state = {\n      showFilters: false,\n      rows: [],\n      filters: {},\n      tags: {}\n    };\n  }\n\n  getFromServer( query, isForDownload ) {\n    let path = `http://${ window.location.hostname }:4000/laus`;\n    if ( isForDownload ) {\n      path += '/download'\n    }\n    if ( query ) {\n      path += query;\n    }\n\n    axios.get( path )\n      .then( response => {\n        if ( isForDownload ) {\n          var headers = response.headers;\n          var blob = new Blob([response.data],{type:headers['content-type']});\n          var link = document.createElement('a');\n          link.style.display = 'none';\n          link.href = window.URL.createObjectURL(blob);\n          link.download = createFilename();\n          link.click();\n          this.setState({isWaitingForDownload: false})\n        } else {\n          this._rows = response.data;\n          const lastItem = response.data[response.data.length - 1];\n          if ( lastItem && lastItem.hasMoreResults ) {\n\n          }\n          this.setState({rows: this._rows});\n        }\n      })\n      .catch( err => {\n        console.log('Resource not available.\\n', err);\n      })\n  }\n\n  componentWillMount() {\n    this.getFromServer();\n  }\n\n  requestFromAPI = ( isForDownload ) => {\n    const queryString = buildQueryString( this.state.filters );\n    this.getFromServer( queryString, isForDownload );\n  }\n\n  getSize = () => {\n    return this.getRows().length;\n  };\n\n  getRows = () => {\n    return Selectors.getRows(this.state);\n  };\n\n  rowGetter = (rowIdx) => {\n    let rows = this.getRows();\n    return rows[rowIdx];\n  };\n\n  onClearFilters = () => {\n    // all filters removed\n    this.setState({filters: {} }, this.requestFromAPI);\n  };\n\n  download = () => {\n    this.setState({isWaitingForDownload:true});\n    this.requestFromAPI( true );\n  };\n\n  pleaseHold = () => {\n    alert('Still in development! Come back in a few days?')\n  };\n\n  handleClick = e => {\n    // return;\n    const isInside = e.target.offsetParent && e.target.offsetParent.className === 'filter-pane'\n    if ( isInside ) {\n      return;\n    }\n    this.closeFilters();\n  };\n\n  closeFilters = () => {\n    document.removeEventListener('mousedown', this.handleClick, false);\n    this.setState({\n      showFilters: false\n    })\n  };\n\n  openFilters = () => {\n    document.addEventListener('mousedown', this.handleClick, false);\n    this.setState({\n      showFilters: true\n    });\n  };\n\n  findKey = ( value ) => {\n    let key = \"\";\n\n    const isMeasureType = this.measureTypes.find( type => type === value );\n    const isSeasonalityType = this.seasonalityEnums.find( type => type.key === value );\n    const isAreaType = this.areaTypes.find( type => type === value );\n    if ( isMeasureType ) {\n      key = \"measure_type\";\n    } else if ( isSeasonalityType ) {\n      key = \"seasonality_enum\";\n    } else if ( isAreaType ) {\n      key = \"area_type\"\n    }\n    return key;\n  }\n\n  handleChange = event => {\n    const { filters } = this.state;\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    if ( target.type === \"checkbox\" ) {\n      const key = this.findKey( name );\n\n      if ( value ) {\n        // being checked\n        filters[ key ] = _.uniq( ( filters[ key ] || [] ).concat( name ) );\n      } else {\n        // being unchecked\n        filters[ key ] = _.uniq( filters[ key ].filter( index => index !== name ) );\n        if ( filters[ key ].length === 0 ) {\n          // to disable the download button.\n          delete filters[ key ];\n        }\n      }\n    }\n\n    this.setState({\n      filters: filters\n    }, this.requestFromAPI);\n  }\n\n  handleTagDelete = (i, key) => {\n    if ( i === 'last' && key === 'area' ) {\n      i = this.state.tags.area.length - 1;\n    }\n    const { filters, tags } = this.state;\n    if ( !filters[ key ] ) {\n      return;\n    }\n    filters[ key ] = filters[key].filter((tag, index) => index !== i);\n    if ( filters[ key ].length === 0 ) {\n      // to disable the download button.\n      delete filters[ key ];\n    }\n    tags[ key ] = tags[key].filter((tag, index) => index !== i);\n    this.setState({\n      filters: filters,\n      tags: tags\n    }, this.requestFromAPI);\n  };\n\n  handleTagAdd = (tag, category) => {\n    const { filters, tags } = this.state;\n    filters[ category ] = ( filters[ category ] || [] ).concat( tag.text );\n    tags[ category ] = ( tags[ category ] || [] ).concat( tag );\n    this.setState({\n      filters: filters,\n      tags: tags\n    }, this.requestFromAPI);\n  };\n\n  DownloadButton = () => {\n    if ( _.isEmpty( this.state.filters ) ) {\n      return (\n        <button disabled>\n          Select some stuff below and then you can download.\n        </button>\n      );\n    } else {\n      return (\n        <button onClick={ this.download }>\n          Download current view.\n        </button>\n      );\n    }\n  }\n\n  makeCheckboxes = names => {\n    const rows = [];\n    let count = 0;\n    names.forEach( value => {\n      let name = '';\n      let supplemental = '';\n\n      if ( typeof value == 'object' ) {\n        name = value.key;\n        supplemental = value.note;\n      } else {\n        name = value;\n      }\n\n      rows.push(<div key={ count }>\n          <label>\n          <input\n            name={ name }\n            type=\"checkbox\"\n            onChange={this.handleChange} />\n            &nbsp;{ name } { supplemental }\n        </label>\n      </div>);\n      count++\n    } );\n\n    return <div>{ rows }</div>\n  }\n\n  FilterForm = () => {\n    const KeyCodes = {\n      comma: 188, // some of the values include commas. therefore, exclude\n      enter: 13,\n      tab: 9\n    };\n\n    const delimiters = [KeyCodes.tab, KeyCodes.enter];\n\n    return (\n      <div className=\"filter-pane\">\n        { !_.isEmpty( this.state.filters ) ?\n            <div>\n              Meets criteria:\n              <ul>\n                {\n                  Object.keys( this.state.filters ).map( (filterName, i) => {\n                    const isLastItem = i + 1 === _.size( this.state.filters );\n                    const filter = this.state.filters[ filterName ];\n                    let string = filter.join(' OR ');\n                    if ( !isLastItem ) {\n                      string += ' AND'\n                    }\n                    return (\n                      <li key={ i }>{ string }</li>\n                    )\n                  })\n                }\n              </ul>\n              <button\n                onClick={this.onClearFilters}>\n                Clear Filters\n              </button>\n\n              <this.DownloadButton />\n              {\n                this.state.isWaitingForDownload ?\n                  <span style={{color: 'green'}}>&nbsp;Waiting for download...</span> :\n                  null\n              }\n            </div>\n            :\n            null\n        }\n        <form>\n          <div className=\"disclaimer\">\n            At the moment, text values inserted here must match upper/lowercase and punctuation of the target search field.\n          </div>\n          <section>\n            <label\n              className=\"hide-input\">\n              <b>Area</b>\n              <div>\n                <ReactTags\n                  tags={this.state.tags.area}\n                  handleDelete={() => {}}\n                  handleAddition={() => {}}\n                  delimiters={delimiters} />\n                <GeoSuggest\n                  dataset=\"laus\"\n                  add={ this.handleTagAdd }\n                  remove={ this.handleTagDelete }/>\n              </div>\n            </label>\n          </section>\n          <section>\n            <label>\n              <b>Period</b>\n              <div>\n                <ReactTags\n                  tags={this.state.tags.period}\n                  handleDelete={e => this.handleTagDelete(e, 'period')}\n                  handleAddition={e => this.handleTagAdd(e, 'period')}\n                  delimiters={delimiters} />\n              </div>\n            </label>\n          </section>\n          <section>\n            <label>\n              <b>Label</b>\n              <div>\n                <ReactTags\n                  tags={this.state.tags.label}\n                  handleDelete={e => this.handleTagDelete(e, 'label')}\n                  handleAddition={e => this.handleTagAdd(e, 'label')}\n                  delimiters={delimiters} />\n              </div>\n            </label>\n          </section>\n          <section>\n            <b>Area Types</b>\n            { this.makeCheckboxes( this.areaTypes ) }\n          </section>\n          <section>\n            <b>Measure Types</b>\n            { this.makeCheckboxes( this.measureTypes ) }\n          </section>\n          <section>\n            <b>Seasonality</b>\n            { this.makeCheckboxes( this.seasonalityEnums ) }\n          </section>\n        </form>\n      </div>\n    );\n  }\n\n  render() {\n    if ( this._rows ) {\n      return  (\n        <div>\n          <div className=\"filter-trigger\">\n            <button\n              onClick={this.openFilters}>\n              Apply Filters\n            </button>\n            {\n              this.state.showFilters && <this.FilterForm />\n            }\n          </div>\n\n          <div style={{\n            position: 'absolute',\n            left: '0',\n            width: '100%'\n            }}>\n            <ReactDataGrid\n              columns={this._columns}\n              rowGetter={this.rowGetter}\n              rowsCount={this.getSize()}\n              minHeight={600}\n              minColumnWidth={120}\n              toolbar={<Toolbar />}\n              />\n            <div className=\"disclaimer\">\n              Data above is only the first 100 rows. If you choose to download your current filter, it will provide the full dataset as stored in the database.\n            </div>\n\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default Grid;\n","import React, { Component } from 'react';\nimport ReactDataGrid from 'react-data-grid';\nimport axios from 'axios';\n\nconst { Toolbar, Data: { Selectors } } = require('react-data-grid-addons');\n\nclass Grid extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      rows: [],\n      filters: {}\n    };\n  }\n\n  componentWillMount() {\n    axios.get( `http://${ window.location.hostname }:4000/unemp` )\n      .then( response => {\n        console.log('response', response);\n      })\n  }\n\n  getSize = () => {\n    return this.getRows().length;\n  };\n\n  getRows = () => {\n    return Selectors.getRows(this.state);\n  };\n\n  rowGetter = (rowIdx) => {\n    // return this._rows[ i ];\n    let rows = this.getRows();\n    return rows[rowIdx];\n  };\n\n  handleFilterChange = (filter) => {\n    let newFilters = Object.assign({}, this.state.filters);\n    if (filter.filterTerm) {\n      newFilters[filter.column.key] = filter;\n    } else {\n      delete newFilters[filter.column.key];\n    }\n    // console.log('newFilters', newFilters);\n    this.setState({ filters: newFilters });\n  };\n\n  onClearFilters = () => {\n    // all filters removed\n    this.setState({filters: {} });\n  };\n\n  render() {\n    if ( this._rows ) {\n      return  (\n        <ReactDataGrid\n          columns={this._columns}\n          rowGetter={this.rowGetter}\n          rowsCount={this.getSize()}\n          minHeight={600}\n          minColumnWidth={120}\n          toolbar={<Toolbar enableFilter={ true } />}\n          onAddFilter={this.handleFilterChange}\n          onClearFilters={this.onClearFilters} />);\n    } else {\n      return (\n        <div>\n          Hi there, still working on it!\n        </div>\n      );\n    }\n  }\n}\n\nexport default Grid;\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport LaborGrid from \"./components/laborStatistics\";\nimport UnemploymentGrid from \"./components/unemployment\";\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props, context)\n\n    this.state = {\n      grid: 'labor'\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.showGrid = this.showGrid.bind(this);\n  }\n\n  handleClick( prompt ) {\n    this.setState({\n      grid: prompt\n    })\n  }\n\n  showGrid() {\n    if ( this.state.grid === 'labor' ) {\n      return <LaborGrid />\n    } else if ( this.state.grid === 'unemployment' ) {\n      return <UnemploymentGrid />\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={() => this.handleClick('labor')}>\n          National and Local Labor Force Statistics\n        </button>\n        <button onClick={() => this.handleClick('unemployment')}>\n          Current Employment\n        </button>\n        { this.showGrid() }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}